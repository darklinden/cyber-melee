// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Proto
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ProjectileDataRow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static ProjectileDataRow GetRootAsProjectileDataRow(ByteBuffer _bb) { return GetRootAsProjectileDataRow(_bb, new ProjectileDataRow()); }
  public static ProjectileDataRow GetRootAsProjectileDataRow(ByteBuffer _bb, ProjectileDataRow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProjectileDataRow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Proto.ProjectileType ProjectileType { get { int o = __p.__offset(4); return o != 0 ? (Proto.ProjectileType)__p.bb.GetInt(o + __p.bb_pos) : Proto.ProjectileType.NONE; } }
  public int CircleColliderRadius { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Speed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Damage { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxLifeTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Proto.ProjectileType MatchUp { get { int o = __p.__offset(14); return o != 0 ? (Proto.ProjectileType)__p.bb.GetInt(o + __p.bb_pos) : Proto.ProjectileType.NONE; } }
  public Proto.EOTTrigger? Trigger(int j) { int o = __p.__offset(16); return o != 0 ? (Proto.EOTTrigger?)(new Proto.EOTTrigger()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TriggerLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Proto.ProjectileDataRow> CreateProjectileDataRow(FlatBufferBuilder builder,
      Proto.ProjectileType projectile_type = Proto.ProjectileType.NONE,
      int circle_collider_radius = 0,
      int speed = 0,
      int damage = 0,
      int max_life_time = 0,
      Proto.ProjectileType match_up = Proto.ProjectileType.NONE,
      VectorOffset triggerOffset = default(VectorOffset)) {
    builder.StartTable(7);
    ProjectileDataRow.AddTrigger(builder, triggerOffset);
    ProjectileDataRow.AddMatchUp(builder, match_up);
    ProjectileDataRow.AddMaxLifeTime(builder, max_life_time);
    ProjectileDataRow.AddDamage(builder, damage);
    ProjectileDataRow.AddSpeed(builder, speed);
    ProjectileDataRow.AddCircleColliderRadius(builder, circle_collider_radius);
    ProjectileDataRow.AddProjectileType(builder, projectile_type);
    return ProjectileDataRow.EndProjectileDataRow(builder);
  }

  public static void StartProjectileDataRow(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddProjectileType(FlatBufferBuilder builder, Proto.ProjectileType projectileType) { builder.AddInt(0, (int)projectileType, 0); }
  public static void AddCircleColliderRadius(FlatBufferBuilder builder, int circleColliderRadius) { builder.AddInt(1, circleColliderRadius, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, int speed) { builder.AddInt(2, speed, 0); }
  public static void AddDamage(FlatBufferBuilder builder, int damage) { builder.AddInt(3, damage, 0); }
  public static void AddMaxLifeTime(FlatBufferBuilder builder, int maxLifeTime) { builder.AddInt(4, maxLifeTime, 0); }
  public static void AddMatchUp(FlatBufferBuilder builder, Proto.ProjectileType matchUp) { builder.AddInt(5, (int)matchUp, 0); }
  public static void AddTrigger(FlatBufferBuilder builder, VectorOffset triggerOffset) { builder.AddOffset(6, triggerOffset.Value, 0); }
  public static VectorOffset CreateTriggerVector(FlatBufferBuilder builder, Offset<Proto.EOTTrigger>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTriggerVectorBlock(FlatBufferBuilder builder, Offset<Proto.EOTTrigger>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Proto.EOTTrigger>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Proto.EOTTrigger>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTriggerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Proto.ProjectileDataRow> EndProjectileDataRow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Proto.ProjectileDataRow>(o);
  }
  public ProjectileDataRowT UnPack() {
    var _o = new ProjectileDataRowT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ProjectileDataRowT _o) {
    _o.ProjectileType = this.ProjectileType;
    _o.CircleColliderRadius = this.CircleColliderRadius;
    _o.Speed = this.Speed;
    _o.Damage = this.Damage;
    _o.MaxLifeTime = this.MaxLifeTime;
    _o.MatchUp = this.MatchUp;
    _o.Trigger = new List<Proto.EOTTriggerT>();
    for (var _j = 0; _j < this.TriggerLength; ++_j) {_o.Trigger.Add(this.Trigger(_j).HasValue ? this.Trigger(_j).Value.UnPack() : null);}
  }
  public static Offset<Proto.ProjectileDataRow> Pack(FlatBufferBuilder builder, ProjectileDataRowT _o) {
    if (_o == null) return default(Offset<Proto.ProjectileDataRow>);
    var _trigger = default(VectorOffset);
    if (_o.Trigger != null) {
      var __trigger = new Offset<Proto.EOTTrigger>[_o.Trigger.Count];
      for (var _j = 0; _j < __trigger.Length; ++_j) { __trigger[_j] = Proto.EOTTrigger.Pack(builder, _o.Trigger[_j]); }
      _trigger = CreateTriggerVector(builder, __trigger);
    }
    return CreateProjectileDataRow(
      builder,
      _o.ProjectileType,
      _o.CircleColliderRadius,
      _o.Speed,
      _o.Damage,
      _o.MaxLifeTime,
      _o.MatchUp,
      _trigger);
  }
}

public class ProjectileDataRowT
{
  public Proto.ProjectileType ProjectileType { get; set; }
  public int CircleColliderRadius { get; set; }
  public int Speed { get; set; }
  public int Damage { get; set; }
  public int MaxLifeTime { get; set; }
  public Proto.ProjectileType MatchUp { get; set; }
  public List<Proto.EOTTriggerT> Trigger { get; set; }

  public ProjectileDataRowT() {
    this.ProjectileType = Proto.ProjectileType.NONE;
    this.CircleColliderRadius = 0;
    this.Speed = 0;
    this.Damage = 0;
    this.MaxLifeTime = 0;
    this.MatchUp = Proto.ProjectileType.NONE;
    this.Trigger = null;
  }
}


static public class ProjectileDataRowVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ProjectileType*/, 4 /*Proto.ProjectileType*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*CircleColliderRadius*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Speed*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Damage*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*MaxLifeTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MatchUp*/, 4 /*Proto.ProjectileType*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*Trigger*/, Proto.EOTTriggerVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
