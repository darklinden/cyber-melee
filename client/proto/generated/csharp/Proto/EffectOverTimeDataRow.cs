// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Proto
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EffectOverTimeDataRow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static EffectOverTimeDataRow GetRootAsEffectOverTimeDataRow(ByteBuffer _bb) { return GetRootAsEffectOverTimeDataRow(_bb, new EffectOverTimeDataRow()); }
  public static EffectOverTimeDataRow GetRootAsEffectOverTimeDataRow(ByteBuffer _bb, EffectOverTimeDataRow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EffectOverTimeDataRow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Proto.EOTType Eot { get { int o = __p.__offset(4); return o != 0 ? (Proto.EOTType)__p.bb.GetSbyte(o + __p.bb_pos) : Proto.EOTType.None; } }
  public Proto.EOTKind Kind { get { int o = __p.__offset(6); return o != 0 ? (Proto.EOTKind)__p.bb.GetSbyte(o + __p.bb_pos) : Proto.EOTKind.None; } }
  public int Duration { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxStack { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Proto.StatProp? Props(int j) { int o = __p.__offset(12); return o != 0 ? (Proto.StatProp?)(new Proto.StatProp()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PropsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Dph { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DohInterval { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpecialParam { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Proto.EOTTrigger? Triggers(int j) { int o = __p.__offset(20); return o != 0 ? (Proto.EOTTrigger?)(new Proto.EOTTrigger()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TriggersLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Proto.EffectOverTimeDataRow> CreateEffectOverTimeDataRow(FlatBufferBuilder builder,
      Proto.EOTType eot = Proto.EOTType.None,
      Proto.EOTKind kind = Proto.EOTKind.None,
      int duration = 0,
      int max_stack = 0,
      VectorOffset propsOffset = default(VectorOffset),
      int dph = 0,
      int doh_interval = 0,
      int special_param = 0,
      VectorOffset triggersOffset = default(VectorOffset)) {
    builder.StartTable(9);
    EffectOverTimeDataRow.AddTriggers(builder, triggersOffset);
    EffectOverTimeDataRow.AddSpecialParam(builder, special_param);
    EffectOverTimeDataRow.AddDohInterval(builder, doh_interval);
    EffectOverTimeDataRow.AddDph(builder, dph);
    EffectOverTimeDataRow.AddProps(builder, propsOffset);
    EffectOverTimeDataRow.AddMaxStack(builder, max_stack);
    EffectOverTimeDataRow.AddDuration(builder, duration);
    EffectOverTimeDataRow.AddKind(builder, kind);
    EffectOverTimeDataRow.AddEot(builder, eot);
    return EffectOverTimeDataRow.EndEffectOverTimeDataRow(builder);
  }

  public static void StartEffectOverTimeDataRow(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddEot(FlatBufferBuilder builder, Proto.EOTType eot) { builder.AddSbyte(0, (sbyte)eot, 0); }
  public static void AddKind(FlatBufferBuilder builder, Proto.EOTKind kind) { builder.AddSbyte(1, (sbyte)kind, 0); }
  public static void AddDuration(FlatBufferBuilder builder, int duration) { builder.AddInt(2, duration, 0); }
  public static void AddMaxStack(FlatBufferBuilder builder, int maxStack) { builder.AddInt(3, maxStack, 0); }
  public static void AddProps(FlatBufferBuilder builder, VectorOffset propsOffset) { builder.AddOffset(4, propsOffset.Value, 0); }
  public static VectorOffset CreatePropsVector(FlatBufferBuilder builder, Offset<Proto.StatProp>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePropsVectorBlock(FlatBufferBuilder builder, Offset<Proto.StatProp>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Proto.StatProp>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Proto.StatProp>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPropsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDph(FlatBufferBuilder builder, int dph) { builder.AddInt(5, dph, 0); }
  public static void AddDohInterval(FlatBufferBuilder builder, int dohInterval) { builder.AddInt(6, dohInterval, 0); }
  public static void AddSpecialParam(FlatBufferBuilder builder, int specialParam) { builder.AddInt(7, specialParam, 0); }
  public static void AddTriggers(FlatBufferBuilder builder, VectorOffset triggersOffset) { builder.AddOffset(8, triggersOffset.Value, 0); }
  public static VectorOffset CreateTriggersVector(FlatBufferBuilder builder, Offset<Proto.EOTTrigger>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTriggersVectorBlock(FlatBufferBuilder builder, Offset<Proto.EOTTrigger>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggersVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Proto.EOTTrigger>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Proto.EOTTrigger>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTriggersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Proto.EffectOverTimeDataRow> EndEffectOverTimeDataRow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Proto.EffectOverTimeDataRow>(o);
  }
  public EffectOverTimeDataRowT UnPack() {
    var _o = new EffectOverTimeDataRowT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EffectOverTimeDataRowT _o) {
    _o.Eot = this.Eot;
    _o.Kind = this.Kind;
    _o.Duration = this.Duration;
    _o.MaxStack = this.MaxStack;
    _o.Props = new List<Proto.StatPropT>();
    for (var _j = 0; _j < this.PropsLength; ++_j) {_o.Props.Add(this.Props(_j).HasValue ? this.Props(_j).Value.UnPack() : null);}
    _o.Dph = this.Dph;
    _o.DohInterval = this.DohInterval;
    _o.SpecialParam = this.SpecialParam;
    _o.Triggers = new List<Proto.EOTTriggerT>();
    for (var _j = 0; _j < this.TriggersLength; ++_j) {_o.Triggers.Add(this.Triggers(_j).HasValue ? this.Triggers(_j).Value.UnPack() : null);}
  }
  public static Offset<Proto.EffectOverTimeDataRow> Pack(FlatBufferBuilder builder, EffectOverTimeDataRowT _o) {
    if (_o == null) return default(Offset<Proto.EffectOverTimeDataRow>);
    var _props = default(VectorOffset);
    if (_o.Props != null) {
      var __props = new Offset<Proto.StatProp>[_o.Props.Count];
      for (var _j = 0; _j < __props.Length; ++_j) { __props[_j] = Proto.StatProp.Pack(builder, _o.Props[_j]); }
      _props = CreatePropsVector(builder, __props);
    }
    var _triggers = default(VectorOffset);
    if (_o.Triggers != null) {
      var __triggers = new Offset<Proto.EOTTrigger>[_o.Triggers.Count];
      for (var _j = 0; _j < __triggers.Length; ++_j) { __triggers[_j] = Proto.EOTTrigger.Pack(builder, _o.Triggers[_j]); }
      _triggers = CreateTriggersVector(builder, __triggers);
    }
    return CreateEffectOverTimeDataRow(
      builder,
      _o.Eot,
      _o.Kind,
      _o.Duration,
      _o.MaxStack,
      _props,
      _o.Dph,
      _o.DohInterval,
      _o.SpecialParam,
      _triggers);
  }
}

public class EffectOverTimeDataRowT
{
  public Proto.EOTType Eot { get; set; }
  public Proto.EOTKind Kind { get; set; }
  public int Duration { get; set; }
  public int MaxStack { get; set; }
  public List<Proto.StatPropT> Props { get; set; }
  public int Dph { get; set; }
  public int DohInterval { get; set; }
  public int SpecialParam { get; set; }
  public List<Proto.EOTTriggerT> Triggers { get; set; }

  public EffectOverTimeDataRowT() {
    this.Eot = Proto.EOTType.None;
    this.Kind = Proto.EOTKind.None;
    this.Duration = 0;
    this.MaxStack = 0;
    this.Props = null;
    this.Dph = 0;
    this.DohInterval = 0;
    this.SpecialParam = 0;
    this.Triggers = null;
  }
}


static public class EffectOverTimeDataRowVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Eot*/, 1 /*Proto.EOTType*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*Kind*/, 1 /*Proto.EOTKind*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*Duration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MaxStack*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*Props*/, Proto.StatPropVerify.Verify, false)
      && verifier.VerifyField(tablePos, 14 /*Dph*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DohInterval*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*SpecialParam*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*Triggers*/, Proto.EOTTriggerVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
