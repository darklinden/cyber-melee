// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Proto
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SkillDataRow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static SkillDataRow GetRootAsSkillDataRow(ByteBuffer _bb) { return GetRootAsSkillDataRow(_bb, new SkillDataRow()); }
  public static SkillDataRow GetRootAsSkillDataRow(ByteBuffer _bb, SkillDataRow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillDataRow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Proto.SkillType SkillType { get { int o = __p.__offset(4); return o != 0 ? (Proto.SkillType)__p.bb.GetInt(o + __p.bb_pos) : Proto.SkillType.NONE; } }
  public int Cooldown { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GlobalCd { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AnimDur { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CastDur { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Proto.ProjectileType Projectiles(int j) { int o = __p.__offset(14); return o != 0 ? (Proto.ProjectileType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Proto.ProjectileType)0; }
  public int ProjectilesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Proto.ProjectileType> GetProjectilesBytes() { return __p.__vector_as_span<Proto.ProjectileType>(14, 4); }
#else
  public ArraySegment<byte>? GetProjectilesBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public Proto.ProjectileType[] GetProjectilesArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Proto.ProjectileType[] a = new Proto.ProjectileType[l]; for (int i = 0; i < l; i++) { a[i] = (Proto.ProjectileType)__p.bb.GetInt(p + i * 4); } return a; }
  public Proto.EOTTrigger? Trigger(int j) { int o = __p.__offset(16); return o != 0 ? (Proto.EOTTrigger?)(new Proto.EOTTrigger()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TriggerLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Proto.SkillDataRow> CreateSkillDataRow(FlatBufferBuilder builder,
      Proto.SkillType skill_type = Proto.SkillType.NONE,
      int cooldown = 0,
      int global_cd = 0,
      int anim_dur = 0,
      int cast_dur = 0,
      VectorOffset projectilesOffset = default(VectorOffset),
      VectorOffset triggerOffset = default(VectorOffset)) {
    builder.StartTable(7);
    SkillDataRow.AddTrigger(builder, triggerOffset);
    SkillDataRow.AddProjectiles(builder, projectilesOffset);
    SkillDataRow.AddCastDur(builder, cast_dur);
    SkillDataRow.AddAnimDur(builder, anim_dur);
    SkillDataRow.AddGlobalCd(builder, global_cd);
    SkillDataRow.AddCooldown(builder, cooldown);
    SkillDataRow.AddSkillType(builder, skill_type);
    return SkillDataRow.EndSkillDataRow(builder);
  }

  public static void StartSkillDataRow(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddSkillType(FlatBufferBuilder builder, Proto.SkillType skillType) { builder.AddInt(0, (int)skillType, 0); }
  public static void AddCooldown(FlatBufferBuilder builder, int cooldown) { builder.AddInt(1, cooldown, 0); }
  public static void AddGlobalCd(FlatBufferBuilder builder, int globalCd) { builder.AddInt(2, globalCd, 0); }
  public static void AddAnimDur(FlatBufferBuilder builder, int animDur) { builder.AddInt(3, animDur, 0); }
  public static void AddCastDur(FlatBufferBuilder builder, int castDur) { builder.AddInt(4, castDur, 0); }
  public static void AddProjectiles(FlatBufferBuilder builder, VectorOffset projectilesOffset) { builder.AddOffset(5, projectilesOffset.Value, 0); }
  public static VectorOffset CreateProjectilesVector(FlatBufferBuilder builder, Proto.ProjectileType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateProjectilesVectorBlock(FlatBufferBuilder builder, Proto.ProjectileType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProjectilesVectorBlock(FlatBufferBuilder builder, ArraySegment<Proto.ProjectileType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProjectilesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Proto.ProjectileType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartProjectilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrigger(FlatBufferBuilder builder, VectorOffset triggerOffset) { builder.AddOffset(6, triggerOffset.Value, 0); }
  public static VectorOffset CreateTriggerVector(FlatBufferBuilder builder, Offset<Proto.EOTTrigger>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTriggerVectorBlock(FlatBufferBuilder builder, Offset<Proto.EOTTrigger>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Proto.EOTTrigger>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTriggerVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Proto.EOTTrigger>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTriggerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Proto.SkillDataRow> EndSkillDataRow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Proto.SkillDataRow>(o);
  }
  public SkillDataRowT UnPack() {
    var _o = new SkillDataRowT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillDataRowT _o) {
    _o.SkillType = this.SkillType;
    _o.Cooldown = this.Cooldown;
    _o.GlobalCd = this.GlobalCd;
    _o.AnimDur = this.AnimDur;
    _o.CastDur = this.CastDur;
    _o.Projectiles = new List<Proto.ProjectileType>();
    for (var _j = 0; _j < this.ProjectilesLength; ++_j) {_o.Projectiles.Add(this.Projectiles(_j));}
    _o.Trigger = new List<Proto.EOTTriggerT>();
    for (var _j = 0; _j < this.TriggerLength; ++_j) {_o.Trigger.Add(this.Trigger(_j).HasValue ? this.Trigger(_j).Value.UnPack() : null);}
  }
  public static Offset<Proto.SkillDataRow> Pack(FlatBufferBuilder builder, SkillDataRowT _o) {
    if (_o == null) return default(Offset<Proto.SkillDataRow>);
    var _projectiles = default(VectorOffset);
    if (_o.Projectiles != null) {
      var __projectiles = _o.Projectiles.ToArray();
      _projectiles = CreateProjectilesVector(builder, __projectiles);
    }
    var _trigger = default(VectorOffset);
    if (_o.Trigger != null) {
      var __trigger = new Offset<Proto.EOTTrigger>[_o.Trigger.Count];
      for (var _j = 0; _j < __trigger.Length; ++_j) { __trigger[_j] = Proto.EOTTrigger.Pack(builder, _o.Trigger[_j]); }
      _trigger = CreateTriggerVector(builder, __trigger);
    }
    return CreateSkillDataRow(
      builder,
      _o.SkillType,
      _o.Cooldown,
      _o.GlobalCd,
      _o.AnimDur,
      _o.CastDur,
      _projectiles,
      _trigger);
  }
}

public class SkillDataRowT
{
  public Proto.SkillType SkillType { get; set; }
  public int Cooldown { get; set; }
  public int GlobalCd { get; set; }
  public int AnimDur { get; set; }
  public int CastDur { get; set; }
  public List<Proto.ProjectileType> Projectiles { get; set; }
  public List<Proto.EOTTriggerT> Trigger { get; set; }

  public SkillDataRowT() {
    this.SkillType = Proto.SkillType.NONE;
    this.Cooldown = 0;
    this.GlobalCd = 0;
    this.AnimDur = 0;
    this.CastDur = 0;
    this.Projectiles = null;
    this.Trigger = null;
  }
}


static public class SkillDataRowVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SkillType*/, 4 /*Proto.SkillType*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Cooldown*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*GlobalCd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*AnimDur*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CastDur*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*Projectiles*/, 4 /*Proto.ProjectileType*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*Trigger*/, Proto.EOTTriggerVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
