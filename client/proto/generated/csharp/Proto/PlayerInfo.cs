// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Proto
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlayerInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static PlayerInfo GetRootAsPlayerInfo(ByteBuffer _bb) { return GetRootAsPlayerInfo(_bb, new PlayerInfo()); }
  public static PlayerInfo GetRootAsPlayerInfo(ByteBuffer _bb, PlayerInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public ulong Seed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public int OtherInfo(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OtherInfoLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOtherInfoBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetOtherInfoBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetOtherInfoArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<Proto.PlayerInfo> CreatePlayerInfo(FlatBufferBuilder builder,
      ulong player_id = 0,
      StringOffset nameOffset = default(StringOffset),
      ulong seed = 0,
      VectorOffset other_infoOffset = default(VectorOffset)) {
    builder.StartTable(4);
    PlayerInfo.AddSeed(builder, seed);
    PlayerInfo.AddPlayerId(builder, player_id);
    PlayerInfo.AddOtherInfo(builder, other_infoOffset);
    PlayerInfo.AddName(builder, nameOffset);
    return PlayerInfo.EndPlayerInfo(builder);
  }

  public static void StartPlayerInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPlayerId(FlatBufferBuilder builder, ulong playerId) { builder.AddUlong(0, playerId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSeed(FlatBufferBuilder builder, ulong seed) { builder.AddUlong(2, seed, 0); }
  public static void AddOtherInfo(FlatBufferBuilder builder, VectorOffset otherInfoOffset) { builder.AddOffset(3, otherInfoOffset.Value, 0); }
  public static VectorOffset CreateOtherInfoVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOtherInfoVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOtherInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOtherInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Proto.PlayerInfo> EndPlayerInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Proto.PlayerInfo>(o);
  }
  public PlayerInfoT UnPack() {
    var _o = new PlayerInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlayerInfoT _o) {
    _o.PlayerId = this.PlayerId;
    _o.Name = this.Name;
    _o.Seed = this.Seed;
    _o.OtherInfo = new List<int>();
    for (var _j = 0; _j < this.OtherInfoLength; ++_j) {_o.OtherInfo.Add(this.OtherInfo(_j));}
  }
  public static Offset<Proto.PlayerInfo> Pack(FlatBufferBuilder builder, PlayerInfoT _o) {
    if (_o == null) return default(Offset<Proto.PlayerInfo>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _other_info = default(VectorOffset);
    if (_o.OtherInfo != null) {
      var __other_info = _o.OtherInfo.ToArray();
      _other_info = CreateOtherInfoVector(builder, __other_info);
    }
    return CreatePlayerInfo(
      builder,
      _o.PlayerId,
      _name,
      _o.Seed,
      _other_info);
  }
}

public class PlayerInfoT
{
  public ulong PlayerId { get; set; }
  public string Name { get; set; }
  public ulong Seed { get; set; }
  public List<int> OtherInfo { get; set; }

  public PlayerInfoT() {
    this.PlayerId = 0;
    this.Name = null;
    this.Seed = 0;
    this.OtherInfo = null;
  }
}


static public class PlayerInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Seed*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*OtherInfo*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
