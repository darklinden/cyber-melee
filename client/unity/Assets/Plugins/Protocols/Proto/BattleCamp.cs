// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Proto
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BattleCamp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static BattleCamp GetRootAsBattleCamp(ByteBuffer _bb) { return GetRootAsBattleCamp(_bb, new BattleCamp()); }
  public static BattleCamp GetRootAsBattleCamp(ByteBuffer _bb, BattleCamp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattleCamp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CampId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Proto.PlayerInfo? Players(int j) { int o = __p.__offset(6); return o != 0 ? (Proto.PlayerInfo?)(new Proto.PlayerInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Proto.BattleCamp> CreateBattleCamp(FlatBufferBuilder builder,
      int camp_id = 0,
      VectorOffset playersOffset = default(VectorOffset)) {
    builder.StartTable(2);
    BattleCamp.AddPlayers(builder, playersOffset);
    BattleCamp.AddCampId(builder, camp_id);
    return BattleCamp.EndBattleCamp(builder);
  }

  public static void StartBattleCamp(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCampId(FlatBufferBuilder builder, int campId) { builder.AddInt(0, campId, 0); }
  public static void AddPlayers(FlatBufferBuilder builder, VectorOffset playersOffset) { builder.AddOffset(1, playersOffset.Value, 0); }
  public static VectorOffset CreatePlayersVector(FlatBufferBuilder builder, Offset<Proto.PlayerInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlayersVectorBlock(FlatBufferBuilder builder, Offset<Proto.PlayerInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayersVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Proto.PlayerInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Proto.PlayerInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Proto.BattleCamp> EndBattleCamp(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Proto.BattleCamp>(o);
  }
  public BattleCampT UnPack() {
    var _o = new BattleCampT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattleCampT _o) {
    _o.CampId = this.CampId;
    _o.Players = new List<Proto.PlayerInfoT>();
    for (var _j = 0; _j < this.PlayersLength; ++_j) {_o.Players.Add(this.Players(_j).HasValue ? this.Players(_j).Value.UnPack() : null);}
  }
  public static Offset<Proto.BattleCamp> Pack(FlatBufferBuilder builder, BattleCampT _o) {
    if (_o == null) return default(Offset<Proto.BattleCamp>);
    var _players = default(VectorOffset);
    if (_o.Players != null) {
      var __players = new Offset<Proto.PlayerInfo>[_o.Players.Count];
      for (var _j = 0; _j < __players.Length; ++_j) { __players[_j] = Proto.PlayerInfo.Pack(builder, _o.Players[_j]); }
      _players = CreatePlayersVector(builder, __players);
    }
    return CreateBattleCamp(
      builder,
      _o.CampId,
      _players);
  }
}

public class BattleCampT
{
  public int CampId { get; set; }
  public List<Proto.PlayerInfoT> Players { get; set; }

  public BattleCampT() {
    this.CampId = 0;
    this.Players = null;
  }
}


static public class BattleCampVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CampId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Players*/, Proto.PlayerInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
