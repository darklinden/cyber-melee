// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Proto
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ReconnectedBattleState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static ReconnectedBattleState GetRootAsReconnectedBattleState(ByteBuffer _bb) { return GetRootAsReconnectedBattleState(_bb, new ReconnectedBattleState()); }
  public static ReconnectedBattleState GetRootAsReconnectedBattleState(ByteBuffer _bb, ReconnectedBattleState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ReconnectedBattleState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong StartServerTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong CurrentServerTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public Proto.ServerBroadcastBattleAction? PassedActions(int j) { int o = __p.__offset(8); return o != 0 ? (Proto.ServerBroadcastBattleAction?)(new Proto.ServerBroadcastBattleAction()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PassedActionsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Proto.ReconnectedBattleState> CreateReconnectedBattleState(FlatBufferBuilder builder,
      ulong start_server_time = 0,
      ulong current_server_time = 0,
      VectorOffset passed_actionsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ReconnectedBattleState.AddCurrentServerTime(builder, current_server_time);
    ReconnectedBattleState.AddStartServerTime(builder, start_server_time);
    ReconnectedBattleState.AddPassedActions(builder, passed_actionsOffset);
    return ReconnectedBattleState.EndReconnectedBattleState(builder);
  }

  public static void StartReconnectedBattleState(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddStartServerTime(FlatBufferBuilder builder, ulong startServerTime) { builder.AddUlong(0, startServerTime, 0); }
  public static void AddCurrentServerTime(FlatBufferBuilder builder, ulong currentServerTime) { builder.AddUlong(1, currentServerTime, 0); }
  public static void AddPassedActions(FlatBufferBuilder builder, VectorOffset passedActionsOffset) { builder.AddOffset(2, passedActionsOffset.Value, 0); }
  public static VectorOffset CreatePassedActionsVector(FlatBufferBuilder builder, Offset<Proto.ServerBroadcastBattleAction>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePassedActionsVectorBlock(FlatBufferBuilder builder, Offset<Proto.ServerBroadcastBattleAction>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassedActionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Proto.ServerBroadcastBattleAction>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassedActionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Proto.ServerBroadcastBattleAction>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPassedActionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Proto.ReconnectedBattleState> EndReconnectedBattleState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Proto.ReconnectedBattleState>(o);
  }
  public ReconnectedBattleStateT UnPack() {
    var _o = new ReconnectedBattleStateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ReconnectedBattleStateT _o) {
    _o.StartServerTime = this.StartServerTime;
    _o.CurrentServerTime = this.CurrentServerTime;
    _o.PassedActions = new List<Proto.ServerBroadcastBattleActionT>();
    for (var _j = 0; _j < this.PassedActionsLength; ++_j) {_o.PassedActions.Add(this.PassedActions(_j).HasValue ? this.PassedActions(_j).Value.UnPack() : null);}
  }
  public static Offset<Proto.ReconnectedBattleState> Pack(FlatBufferBuilder builder, ReconnectedBattleStateT _o) {
    if (_o == null) return default(Offset<Proto.ReconnectedBattleState>);
    var _passed_actions = default(VectorOffset);
    if (_o.PassedActions != null) {
      var __passed_actions = new Offset<Proto.ServerBroadcastBattleAction>[_o.PassedActions.Count];
      for (var _j = 0; _j < __passed_actions.Length; ++_j) { __passed_actions[_j] = Proto.ServerBroadcastBattleAction.Pack(builder, _o.PassedActions[_j]); }
      _passed_actions = CreatePassedActionsVector(builder, __passed_actions);
    }
    return CreateReconnectedBattleState(
      builder,
      _o.StartServerTime,
      _o.CurrentServerTime,
      _passed_actions);
  }
}

public class ReconnectedBattleStateT
{
  public ulong StartServerTime { get; set; }
  public ulong CurrentServerTime { get; set; }
  public List<Proto.ServerBroadcastBattleActionT> PassedActions { get; set; }

  public ReconnectedBattleStateT() {
    this.StartServerTime = 0;
    this.CurrentServerTime = 0;
    this.PassedActions = null;
  }
}


static public class ReconnectedBattleStateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*StartServerTime*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CurrentServerTime*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*PassedActions*/, Proto.ServerBroadcastBattleActionVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
