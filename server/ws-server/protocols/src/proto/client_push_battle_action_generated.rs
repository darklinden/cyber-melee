// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ClientPushBattleActionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ClientPushBattleAction<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientPushBattleAction<'a> {
  type Inner = ClientPushBattleAction<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ClientPushBattleAction<'a> {
  pub const VT_ACTION_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_ACTION_PARAMS: flatbuffers::VOffsetT = 6;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ClientPushBattleAction"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ClientPushBattleAction { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ClientPushBattleActionArgs<'args>
  ) -> flatbuffers::WIPOffset<ClientPushBattleAction<'bldr>> {
    let mut builder = ClientPushBattleActionBuilder::new(_fbb);
    if let Some(x) = args.action_params { builder.add_action_params(x); }
    builder.add_action_type(args.action_type);
    builder.finish()
  }

  pub fn unpack(&self) -> ClientPushBattleActionT {
    let action_type = self.action_type();
    let action_params = self.action_params().map(|x| {
      x.into_iter().collect()
    });
    ClientPushBattleActionT {
      action_type,
      action_params,
    }
  }

  #[inline]
  pub fn action_type(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ClientPushBattleAction::VT_ACTION_TYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn action_params(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(ClientPushBattleAction::VT_ACTION_PARAMS, None)}
  }
}

impl flatbuffers::Verifiable for ClientPushBattleAction<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("action_type", Self::VT_ACTION_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("action_params", Self::VT_ACTION_PARAMS, false)?
     .finish();
    Ok(())
  }
}
pub struct ClientPushBattleActionArgs<'a> {
    pub action_type: i32,
    pub action_params: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for ClientPushBattleActionArgs<'a> {
  #[inline]
  fn default() -> Self {
    ClientPushBattleActionArgs {
      action_type: 0,
      action_params: None,
    }
  }
}

pub struct ClientPushBattleActionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientPushBattleActionBuilder<'a, 'b> {
  #[inline]
  pub fn add_action_type(&mut self, action_type: i32) {
    self.fbb_.push_slot::<i32>(ClientPushBattleAction::VT_ACTION_TYPE, action_type, 0);
  }
  #[inline]
  pub fn add_action_params(&mut self, action_params: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ClientPushBattleAction::VT_ACTION_PARAMS, action_params);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientPushBattleActionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientPushBattleActionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientPushBattleAction<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ClientPushBattleAction<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ClientPushBattleAction");
      ds.field("action_type", &self.action_type());
      ds.field("action_params", &self.action_params());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ClientPushBattleActionT {
  pub action_type: i32,
  pub action_params: Option<Vec<i32>>,
}
impl Default for ClientPushBattleActionT {
  fn default() -> Self {
    Self {
      action_type: 0,
      action_params: None,
    }
  }
}
impl ClientPushBattleActionT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ClientPushBattleAction<'b>> {
    let action_type = self.action_type;
    let action_params = self.action_params.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ClientPushBattleAction::create(_fbb, &ClientPushBattleActionArgs{
      action_type,
      action_params,
    })
  }
}
