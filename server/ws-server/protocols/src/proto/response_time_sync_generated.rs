// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ResponseTimeSyncOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ResponseTimeSync<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ResponseTimeSync<'a> {
  type Inner = ResponseTimeSync<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ResponseTimeSync<'a> {
  pub const VT_CLIENT_TIME: flatbuffers::VOffsetT = 4;
  pub const VT_SERVER_TIME: flatbuffers::VOffsetT = 6;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ResponseTimeSync"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ResponseTimeSync { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ResponseTimeSyncArgs
  ) -> flatbuffers::WIPOffset<ResponseTimeSync<'bldr>> {
    let mut builder = ResponseTimeSyncBuilder::new(_fbb);
    builder.add_server_time(args.server_time);
    builder.add_client_time(args.client_time);
    builder.finish()
  }

  pub fn unpack(&self) -> ResponseTimeSyncT {
    let client_time = self.client_time();
    let server_time = self.server_time();
    ResponseTimeSyncT {
      client_time,
      server_time,
    }
  }

  #[inline]
  pub fn client_time(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ResponseTimeSync::VT_CLIENT_TIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn server_time(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ResponseTimeSync::VT_SERVER_TIME, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ResponseTimeSync<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("client_time", Self::VT_CLIENT_TIME, false)?
     .visit_field::<u64>("server_time", Self::VT_SERVER_TIME, false)?
     .finish();
    Ok(())
  }
}
pub struct ResponseTimeSyncArgs {
    pub client_time: u64,
    pub server_time: u64,
}
impl<'a> Default for ResponseTimeSyncArgs {
  #[inline]
  fn default() -> Self {
    ResponseTimeSyncArgs {
      client_time: 0,
      server_time: 0,
    }
  }
}

pub struct ResponseTimeSyncBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ResponseTimeSyncBuilder<'a, 'b> {
  #[inline]
  pub fn add_client_time(&mut self, client_time: u64) {
    self.fbb_.push_slot::<u64>(ResponseTimeSync::VT_CLIENT_TIME, client_time, 0);
  }
  #[inline]
  pub fn add_server_time(&mut self, server_time: u64) {
    self.fbb_.push_slot::<u64>(ResponseTimeSync::VT_SERVER_TIME, server_time, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResponseTimeSyncBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ResponseTimeSyncBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ResponseTimeSync<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ResponseTimeSync<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ResponseTimeSync");
      ds.field("client_time", &self.client_time());
      ds.field("server_time", &self.server_time());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ResponseTimeSyncT {
  pub client_time: u64,
  pub server_time: u64,
}
impl Default for ResponseTimeSyncT {
  fn default() -> Self {
    Self {
      client_time: 0,
      server_time: 0,
    }
  }
}
impl ResponseTimeSyncT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ResponseTimeSync<'b>> {
    let client_time = self.client_time;
    let server_time = self.server_time;
    ResponseTimeSync::create(_fbb, &ResponseTimeSyncArgs{
      client_time,
      server_time,
    })
  }
}
