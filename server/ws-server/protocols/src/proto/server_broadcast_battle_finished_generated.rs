// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ServerBroadcastBattleFinishedOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServerBroadcastBattleFinished<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerBroadcastBattleFinished<'a> {
  type Inner = ServerBroadcastBattleFinished<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ServerBroadcastBattleFinished<'a> {
  pub const VT_RESULT_SAME: flatbuffers::VOffsetT = 4;
  pub const VT_WIN_CAMP_RANK: flatbuffers::VOffsetT = 6;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ServerBroadcastBattleFinished"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServerBroadcastBattleFinished { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ServerBroadcastBattleFinishedArgs<'args>
  ) -> flatbuffers::WIPOffset<ServerBroadcastBattleFinished<'bldr>> {
    let mut builder = ServerBroadcastBattleFinishedBuilder::new(_fbb);
    if let Some(x) = args.win_camp_rank { builder.add_win_camp_rank(x); }
    builder.add_result_same(args.result_same);
    builder.finish()
  }

  pub fn unpack(&self) -> ServerBroadcastBattleFinishedT {
    let result_same = self.result_same();
    let win_camp_rank = self.win_camp_rank().map(|x| {
      x.into_iter().collect()
    });
    ServerBroadcastBattleFinishedT {
      result_same,
      win_camp_rank,
    }
  }

  #[inline]
  pub fn result_same(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ServerBroadcastBattleFinished::VT_RESULT_SAME, Some(false)).unwrap()}
  }
  #[inline]
  pub fn win_camp_rank(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(ServerBroadcastBattleFinished::VT_WIN_CAMP_RANK, None)}
  }
}

impl flatbuffers::Verifiable for ServerBroadcastBattleFinished<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("result_same", Self::VT_RESULT_SAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("win_camp_rank", Self::VT_WIN_CAMP_RANK, false)?
     .finish();
    Ok(())
  }
}
pub struct ServerBroadcastBattleFinishedArgs<'a> {
    pub result_same: bool,
    pub win_camp_rank: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
}
impl<'a> Default for ServerBroadcastBattleFinishedArgs<'a> {
  #[inline]
  fn default() -> Self {
    ServerBroadcastBattleFinishedArgs {
      result_same: false,
      win_camp_rank: None,
    }
  }
}

pub struct ServerBroadcastBattleFinishedBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ServerBroadcastBattleFinishedBuilder<'a, 'b> {
  #[inline]
  pub fn add_result_same(&mut self, result_same: bool) {
    self.fbb_.push_slot::<bool>(ServerBroadcastBattleFinished::VT_RESULT_SAME, result_same, false);
  }
  #[inline]
  pub fn add_win_camp_rank(&mut self, win_camp_rank: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerBroadcastBattleFinished::VT_WIN_CAMP_RANK, win_camp_rank);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ServerBroadcastBattleFinishedBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ServerBroadcastBattleFinishedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerBroadcastBattleFinished<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServerBroadcastBattleFinished<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServerBroadcastBattleFinished");
      ds.field("result_same", &self.result_same());
      ds.field("win_camp_rank", &self.win_camp_rank());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ServerBroadcastBattleFinishedT {
  pub result_same: bool,
  pub win_camp_rank: Option<Vec<u64>>,
}
impl Default for ServerBroadcastBattleFinishedT {
  fn default() -> Self {
    Self {
      result_same: false,
      win_camp_rank: None,
    }
  }
}
impl ServerBroadcastBattleFinishedT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ServerBroadcastBattleFinished<'b>> {
    let result_same = self.result_same;
    let win_camp_rank = self.win_camp_rank.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ServerBroadcastBattleFinished::create(_fbb, &ServerBroadcastBattleFinishedArgs{
      result_same,
      win_camp_rank,
    })
  }
}
