// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ClientPushBattleLoadProgressOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ClientPushBattleLoadProgress<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientPushBattleLoadProgress<'a> {
  type Inner = ClientPushBattleLoadProgress<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ClientPushBattleLoadProgress<'a> {
  pub const VT_PROGRESS: flatbuffers::VOffsetT = 4;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ClientPushBattleLoadProgress"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ClientPushBattleLoadProgress { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ClientPushBattleLoadProgressArgs
  ) -> flatbuffers::WIPOffset<ClientPushBattleLoadProgress<'bldr>> {
    let mut builder = ClientPushBattleLoadProgressBuilder::new(_fbb);
    builder.add_progress(args.progress);
    builder.finish()
  }

  pub fn unpack(&self) -> ClientPushBattleLoadProgressT {
    let progress = self.progress();
    ClientPushBattleLoadProgressT {
      progress,
    }
  }

  #[inline]
  pub fn progress(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ClientPushBattleLoadProgress::VT_PROGRESS, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ClientPushBattleLoadProgress<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("progress", Self::VT_PROGRESS, false)?
     .finish();
    Ok(())
  }
}
pub struct ClientPushBattleLoadProgressArgs {
    pub progress: i32,
}
impl<'a> Default for ClientPushBattleLoadProgressArgs {
  #[inline]
  fn default() -> Self {
    ClientPushBattleLoadProgressArgs {
      progress: 0,
    }
  }
}

pub struct ClientPushBattleLoadProgressBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientPushBattleLoadProgressBuilder<'a, 'b> {
  #[inline]
  pub fn add_progress(&mut self, progress: i32) {
    self.fbb_.push_slot::<i32>(ClientPushBattleLoadProgress::VT_PROGRESS, progress, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientPushBattleLoadProgressBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientPushBattleLoadProgressBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientPushBattleLoadProgress<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ClientPushBattleLoadProgress<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ClientPushBattleLoadProgress");
      ds.field("progress", &self.progress());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ClientPushBattleLoadProgressT {
  pub progress: i32,
}
impl Default for ClientPushBattleLoadProgressT {
  fn default() -> Self {
    Self {
      progress: 0,
    }
  }
}
impl ClientPushBattleLoadProgressT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ClientPushBattleLoadProgress<'b>> {
    let progress = self.progress;
    ClientPushBattleLoadProgress::create(_fbb, &ClientPushBattleLoadProgressArgs{
      progress,
    })
  }
}
