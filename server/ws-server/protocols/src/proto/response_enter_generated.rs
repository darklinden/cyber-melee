// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ResponseEnterOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ResponseEnter<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ResponseEnter<'a> {
  type Inner = ResponseEnter<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ResponseEnter<'a> {
  pub const VT_PLAYER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_RECONNECT_SECRET: flatbuffers::VOffsetT = 6;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ResponseEnter"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ResponseEnter { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ResponseEnterArgs
  ) -> flatbuffers::WIPOffset<ResponseEnter<'bldr>> {
    let mut builder = ResponseEnterBuilder::new(_fbb);
    builder.add_reconnect_secret(args.reconnect_secret);
    builder.add_player_id(args.player_id);
    builder.finish()
  }

  pub fn unpack(&self) -> ResponseEnterT {
    let player_id = self.player_id();
    let reconnect_secret = self.reconnect_secret();
    ResponseEnterT {
      player_id,
      reconnect_secret,
    }
  }

  #[inline]
  pub fn player_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ResponseEnter::VT_PLAYER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn reconnect_secret(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ResponseEnter::VT_RECONNECT_SECRET, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ResponseEnter<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("player_id", Self::VT_PLAYER_ID, false)?
     .visit_field::<u64>("reconnect_secret", Self::VT_RECONNECT_SECRET, false)?
     .finish();
    Ok(())
  }
}
pub struct ResponseEnterArgs {
    pub player_id: u64,
    pub reconnect_secret: u64,
}
impl<'a> Default for ResponseEnterArgs {
  #[inline]
  fn default() -> Self {
    ResponseEnterArgs {
      player_id: 0,
      reconnect_secret: 0,
    }
  }
}

pub struct ResponseEnterBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ResponseEnterBuilder<'a, 'b> {
  #[inline]
  pub fn add_player_id(&mut self, player_id: u64) {
    self.fbb_.push_slot::<u64>(ResponseEnter::VT_PLAYER_ID, player_id, 0);
  }
  #[inline]
  pub fn add_reconnect_secret(&mut self, reconnect_secret: u64) {
    self.fbb_.push_slot::<u64>(ResponseEnter::VT_RECONNECT_SECRET, reconnect_secret, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResponseEnterBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ResponseEnterBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ResponseEnter<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ResponseEnter<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ResponseEnter");
      ds.field("player_id", &self.player_id());
      ds.field("reconnect_secret", &self.reconnect_secret());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ResponseEnterT {
  pub player_id: u64,
  pub reconnect_secret: u64,
}
impl Default for ResponseEnterT {
  fn default() -> Self {
    Self {
      player_id: 0,
      reconnect_secret: 0,
    }
  }
}
impl ResponseEnterT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ResponseEnter<'b>> {
    let player_id = self.player_id;
    let reconnect_secret = self.reconnect_secret;
    ResponseEnter::create(_fbb, &ResponseEnterArgs{
      player_id,
      reconnect_secret,
    })
  }
}
