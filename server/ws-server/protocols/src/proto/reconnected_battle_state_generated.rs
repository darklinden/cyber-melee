// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ReconnectedBattleStateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ReconnectedBattleState<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ReconnectedBattleState<'a> {
  type Inner = ReconnectedBattleState<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ReconnectedBattleState<'a> {
  pub const VT_START_SERVER_TIME: flatbuffers::VOffsetT = 4;
  pub const VT_CURRENT_SERVER_TIME: flatbuffers::VOffsetT = 6;
  pub const VT_PASSED_ACTIONS: flatbuffers::VOffsetT = 8;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ReconnectedBattleState"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ReconnectedBattleState { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ReconnectedBattleStateArgs<'args>
  ) -> flatbuffers::WIPOffset<ReconnectedBattleState<'bldr>> {
    let mut builder = ReconnectedBattleStateBuilder::new(_fbb);
    builder.add_current_server_time(args.current_server_time);
    builder.add_start_server_time(args.start_server_time);
    if let Some(x) = args.passed_actions { builder.add_passed_actions(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ReconnectedBattleStateT {
    let start_server_time = self.start_server_time();
    let current_server_time = self.current_server_time();
    let passed_actions = self.passed_actions().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    ReconnectedBattleStateT {
      start_server_time,
      current_server_time,
      passed_actions,
    }
  }

  #[inline]
  pub fn start_server_time(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ReconnectedBattleState::VT_START_SERVER_TIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn current_server_time(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ReconnectedBattleState::VT_CURRENT_SERVER_TIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn passed_actions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ServerBroadcastBattleAction<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ServerBroadcastBattleAction>>>>(ReconnectedBattleState::VT_PASSED_ACTIONS, None)}
  }
}

impl flatbuffers::Verifiable for ReconnectedBattleState<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("start_server_time", Self::VT_START_SERVER_TIME, false)?
     .visit_field::<u64>("current_server_time", Self::VT_CURRENT_SERVER_TIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ServerBroadcastBattleAction>>>>("passed_actions", Self::VT_PASSED_ACTIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct ReconnectedBattleStateArgs<'a> {
    pub start_server_time: u64,
    pub current_server_time: u64,
    pub passed_actions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ServerBroadcastBattleAction<'a>>>>>,
}
impl<'a> Default for ReconnectedBattleStateArgs<'a> {
  #[inline]
  fn default() -> Self {
    ReconnectedBattleStateArgs {
      start_server_time: 0,
      current_server_time: 0,
      passed_actions: None,
    }
  }
}

pub struct ReconnectedBattleStateBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ReconnectedBattleStateBuilder<'a, 'b> {
  #[inline]
  pub fn add_start_server_time(&mut self, start_server_time: u64) {
    self.fbb_.push_slot::<u64>(ReconnectedBattleState::VT_START_SERVER_TIME, start_server_time, 0);
  }
  #[inline]
  pub fn add_current_server_time(&mut self, current_server_time: u64) {
    self.fbb_.push_slot::<u64>(ReconnectedBattleState::VT_CURRENT_SERVER_TIME, current_server_time, 0);
  }
  #[inline]
  pub fn add_passed_actions(&mut self, passed_actions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ServerBroadcastBattleAction<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ReconnectedBattleState::VT_PASSED_ACTIONS, passed_actions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ReconnectedBattleStateBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ReconnectedBattleStateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ReconnectedBattleState<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ReconnectedBattleState<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ReconnectedBattleState");
      ds.field("start_server_time", &self.start_server_time());
      ds.field("current_server_time", &self.current_server_time());
      ds.field("passed_actions", &self.passed_actions());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ReconnectedBattleStateT {
  pub start_server_time: u64,
  pub current_server_time: u64,
  pub passed_actions: Option<Vec<ServerBroadcastBattleActionT>>,
}
impl Default for ReconnectedBattleStateT {
  fn default() -> Self {
    Self {
      start_server_time: 0,
      current_server_time: 0,
      passed_actions: None,
    }
  }
}
impl ReconnectedBattleStateT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ReconnectedBattleState<'b>> {
    let start_server_time = self.start_server_time;
    let current_server_time = self.current_server_time;
    let passed_actions = self.passed_actions.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    ReconnectedBattleState::create(_fbb, &ReconnectedBattleStateArgs{
      start_server_time,
      current_server_time,
      passed_actions,
    })
  }
}
