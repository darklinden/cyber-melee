// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ServerBroadcastBattleStartOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServerBroadcastBattleStart<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerBroadcastBattleStart<'a> {
  type Inner = ServerBroadcastBattleStart<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ServerBroadcastBattleStart<'a> {
  pub const VT_ROOM_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CAMPS: flatbuffers::VOffsetT = 6;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ServerBroadcastBattleStart"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServerBroadcastBattleStart { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ServerBroadcastBattleStartArgs<'args>
  ) -> flatbuffers::WIPOffset<ServerBroadcastBattleStart<'bldr>> {
    let mut builder = ServerBroadcastBattleStartBuilder::new(_fbb);
    builder.add_room_id(args.room_id);
    if let Some(x) = args.camps { builder.add_camps(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ServerBroadcastBattleStartT {
    let room_id = self.room_id();
    let camps = self.camps().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    ServerBroadcastBattleStartT {
      room_id,
      camps,
    }
  }

  #[inline]
  pub fn room_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ServerBroadcastBattleStart::VT_ROOM_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn camps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BattleCamp<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BattleCamp>>>>(ServerBroadcastBattleStart::VT_CAMPS, None)}
  }
}

impl flatbuffers::Verifiable for ServerBroadcastBattleStart<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("room_id", Self::VT_ROOM_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BattleCamp>>>>("camps", Self::VT_CAMPS, false)?
     .finish();
    Ok(())
  }
}
pub struct ServerBroadcastBattleStartArgs<'a> {
    pub room_id: i64,
    pub camps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BattleCamp<'a>>>>>,
}
impl<'a> Default for ServerBroadcastBattleStartArgs<'a> {
  #[inline]
  fn default() -> Self {
    ServerBroadcastBattleStartArgs {
      room_id: 0,
      camps: None,
    }
  }
}

pub struct ServerBroadcastBattleStartBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ServerBroadcastBattleStartBuilder<'a, 'b> {
  #[inline]
  pub fn add_room_id(&mut self, room_id: i64) {
    self.fbb_.push_slot::<i64>(ServerBroadcastBattleStart::VT_ROOM_ID, room_id, 0);
  }
  #[inline]
  pub fn add_camps(&mut self, camps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BattleCamp<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerBroadcastBattleStart::VT_CAMPS, camps);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ServerBroadcastBattleStartBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ServerBroadcastBattleStartBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerBroadcastBattleStart<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServerBroadcastBattleStart<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServerBroadcastBattleStart");
      ds.field("room_id", &self.room_id());
      ds.field("camps", &self.camps());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ServerBroadcastBattleStartT {
  pub room_id: i64,
  pub camps: Option<Vec<BattleCampT>>,
}
impl Default for ServerBroadcastBattleStartT {
  fn default() -> Self {
    Self {
      room_id: 0,
      camps: None,
    }
  }
}
impl ServerBroadcastBattleStartT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ServerBroadcastBattleStart<'b>> {
    let room_id = self.room_id;
    let camps = self.camps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    ServerBroadcastBattleStart::create(_fbb, &ServerBroadcastBattleStartArgs{
      room_id,
      camps,
    })
  }
}
